name: Flutter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze-test-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      # Cache pub dependencies
      - name: Cache pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            **/.dart_tool
            **/.packages
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      # Security: Check for known vulnerabilities in dependencies
      - name: Check for dependency vulnerabilities
        run: |
          echo "Checking for outdated or vulnerable dependencies..."
          flutter pub outdated || true
        continue-on-error: true

      # Code quality analysis
      - name: Analyze code quality
        run: flutter analyze --no-fatal-infos

      # Static security analysis with custom rules
      - name: Run static security analysis
        run: |
          echo "Running security checks..."
          # Check for potential hardcoded secrets
          echo "Checking for potential secrets in code..."
          if grep -r -i "api[_-]key\|password\|secret\|token" lib/ --exclude-dir=.dart_tool | grep -v "//"; then
            echo "⚠️ WARNING: Potential secrets found in code. Please review!"
          else
            echo "✓ No obvious secrets found in code"
          fi
        continue-on-error: true

      # Run tests with coverage
      - name: Run tests
        run: flutter test --coverage

      # Generate test coverage report
      - name: Generate coverage report
        if: success()
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "Coverage report generated successfully"
            # Calculate coverage percentage
            COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep -o '[0-9.]*%' | head -1)
            echo "Test coverage: $COVERAGE"
          fi
        continue-on-error: true

      # Build debug APK
      - name: Build debug (Android)
        run: flutter build apk --debug --no-shrink || true

      # Upload coverage artifacts
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 30

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test/
          retention-days: 30

  # Additional security scanning job
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      # Check for exposed secrets
      - name: Secret scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true
